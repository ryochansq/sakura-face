{"version":3,"sources":["hooks/useApi.ts","components/TweetButton.tsx","components/Pictures.tsx","App.tsx","index.tsx"],"names":["axios","defaults","baseURL","detect","file","a","headers","post","response","data","findSimilar","faceId","useStyles","makeStyles","createStyles","tweet","color","fontWeight","textTransform","TweetButton","students","classes","Button","className","variant","onClick","subText","reduce","acc","student","name","confidence","toFixed","text","encodedText","encodeURIComponent","intent","window","open","pictureContainer","width","position","loaded","height","objectFit","rightGrid","aspectRatio","studentPicture","message","whiteSpace","Pictures","useState","undefined","imageData","setImageData","imgRef","useRef","faces","setFaces","setStudents","loading","setLoading","selectedFaceNum","setSelectedFaceNum","messages","setMessage","rectPos","face","type","wr","current","naturalWidth","hr","naturalHeight","ratio","some","val","px","faceRectangle","onClickFaceRect","index","newStudents","onChangeInput","e","target","files","length","reader","FileReader","readAsDataURL","onload","result","size","newFaces","status","error","Grid","item","container","direction","xs","justify","alignItems","ref","src","alt","map","style","backgroundColor","border","faceNum","cursor","padding","left","top","CircularProgress","Typography","component","disabled","accept","hidden","onChange","spacing","theme","createMuiTheme","palette","secondary","main","title","flexGrow","body","App","ThemeProvider","AppBar","Toolbar","Container","maxWidth","Paper","Link","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac6aa367.chunk.js","sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL =\n  'https://jzzezp7bhc.execute-api.ap-northeast-1.amazonaws.com/dev/';\n\nexport const detect = async (file: File): Promise<Face[]> => {\n  const headers = { 'content-type': 'application/octet-stream' };\n  const response = await axios.post<Face[]>('/detect', file, { headers });\n  return response.data;\n};\n\nexport const findSimilar = async (faceId: string): Promise<Student[]> => {\n  const response = await axios.post<Student[]>('/findSimilar', { faceId });\n  return response.data;\n};\n","import { VFC } from 'react';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { Button } from '@material-ui/core';\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    tweet: {\n      color: 'white',\n      fontWeight: 700,\n      textTransform: 'none',\n    },\n  })\n);\n\ntype Props = {\n  students: Student[];\n};\n\nconst TweetButton: VFC<Props> = ({ students }: Props) => {\n  const classes = useStyles();\n\n  const tweet = () => {\n    const subText = students.reduce(\n      (acc, student) =>\n        `${acc}${student.name} ... そっくり度 ${(\n          student.confidence * 100\n        ).toFixed(1)}%\\n`,\n      ''\n    );\n    const text = `さくら学院顔診断で誰に似てるか診断しました！\\n\\n${subText}\\nryochansq.github.io/sakura-face/\\n\\n#さくら学院 #さくら学院顔診断\\n#さくら学院父兄パソコン部`;\n    const encodedText = encodeURIComponent(text);\n    const intent = `https://twitter.com/intent/tweet?text=${encodedText}`;\n    window.open(intent);\n  };\n\n  return (\n    <Button\n      className={classes.tweet}\n      variant=\"contained\"\n      color=\"secondary\"\n      onClick={tweet}\n    >\n      Twitterで共有\n    </Button>\n  );\n};\n\nexport default TweetButton;\n","import React, { VFC, useState, useRef } from 'react';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { Button, CircularProgress, Grid, Typography } from '@material-ui/core';\nimport { AxiosError } from 'axios';\nimport { detect, findSimilar } from '../hooks/useApi';\nimport TweetButton from './TweetButton';\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    pictureContainer: {\n      width: '100%',\n      position: 'relative',\n    },\n    loaded: {\n      width: '100%',\n      height: '100%',\n      objectFit: 'contain',\n    },\n    rightGrid: {\n      aspectRatio: '500 / 634',\n    },\n    studentPicture: {\n      width: '100%',\n      height: '100%',\n      objectFit: 'contain',\n    },\n    message: {\n      fontWeight: 700,\n      whiteSpace: 'pre-line',\n    },\n    tweet: {\n      color: 'white',\n      fontWeight: 700,\n      textTransform: 'none',\n    },\n  })\n);\n\nconst Pictures: VFC = () => {\n  const classes = useStyles();\n  const [imageData, setImageData] = useState<string | undefined>(undefined);\n  const imgRef = useRef<HTMLImageElement>(null);\n  const [faces, setFaces] = useState<Face[]>([]);\n  const [students, setStudents] = useState<Student[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedFaceNum, setSelectedFaceNum] = useState(-1);\n  const messages = {\n    multiple: '判定したい顔を\\nタップしてください',\n    zero: '顔が検出されませんでした、別の画像をお試しください',\n    imageError: '画像の処理に失敗しました、別の画像をお試しください',\n    serverError: 'エラーが発生しました、時間をおいて再度お試しください',\n  };\n  const [message, setMessage] = useState(messages.multiple);\n\n  const rectPos = (face: Face, type: keyof Face['faceRectangle']): string => {\n    const wr = imgRef.current ? 100 / imgRef.current.naturalWidth : 0;\n    const hr = imgRef.current ? 100 / imgRef.current.naturalHeight : 0;\n    const ratio = ['left', 'width'].some((val) => val === type) ? wr : hr;\n    const px = ['left', 'top'].some((val) => val === type) ? -2 : 4;\n    return `calc(${face.faceRectangle[type] * ratio}% + ${px}px)`;\n  };\n\n  const onClickFaceRect = async (faceId: string, index: number) => {\n    setSelectedFaceNum(index);\n    setLoading(true);\n    setStudents([]);\n    try {\n      const newStudents = await findSimilar(faceId);\n      setStudents(newStudents);\n    } catch {\n      setMessage(messages.serverError);\n    }\n    setLoading(false);\n  };\n\n  const onChangeInput = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = e;\n    const { files } = target;\n    const file = files && files.length ? files[0] : null;\n    if (!file) return;\n\n    setLoading(true);\n    setFaces([]);\n    setStudents([]);\n    setSelectedFaceNum(-1);\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      const { result } = reader;\n      setImageData(result as string);\n    };\n    if (file.size > 5000000) {\n      setMessage('画像サイズが大きすぎます、別の画像をお試しください');\n      setLoading(false);\n      return;\n    }\n    try {\n      const newFaces = await detect(file);\n      setFaces(newFaces);\n      setLoading(false);\n      if (newFaces.length === 1) await onClickFaceRect(newFaces[0].faceId, 0);\n      if (newFaces.length === 0) setMessage(messages.zero);\n      else setMessage(messages.multiple);\n    } catch (err) {\n      const { response } = err as AxiosError<myError>;\n      if (!response || response.status >= 500) {\n        setMessage(messages.serverError);\n      } else {\n        // eslint-disable-next-line\n        setMessage(`${messages.imageError}\\n${response.data.error.message}`);\n      }\n      setLoading(false);\n    }\n  };\n\n  const rectColor = (faceNum: number): string => {\n    if (selectedFaceNum === -1) return 'blue';\n    if (faceNum === selectedFaceNum) return 'red';\n    return 'white';\n  };\n\n  return (\n    <>\n      {imageData && (\n        <Grid item container>\n          <Grid item container direction=\"row\">\n            <Grid item container xs={6} justify=\"center\" alignItems=\"center\">\n              <Grid className={classes.pictureContainer} item container>\n                <img\n                  ref={imgRef}\n                  src={imageData}\n                  alt=\"選択画像\"\n                  className={classes.loaded}\n                />\n                {faces.map((face, index) => (\n                  <button\n                    key={face.faceId}\n                    onClick={() => onClickFaceRect(face.faceId, index)}\n                    type=\"button\"\n                    style={{\n                      backgroundColor: 'transparent',\n                      border: `2px solid ${rectColor(index)}`,\n                      color: 'transparent',\n                      cursor: 'pointer',\n                      position: 'absolute',\n                      padding: 0,\n                      left: rectPos(face, 'left'),\n                      top: rectPos(face, 'top'),\n                      width: rectPos(face, 'width'),\n                      height: rectPos(face, 'height'),\n                    }}\n                  >\n                    :\n                  </button>\n                ))}\n              </Grid>\n            </Grid>\n            <Grid\n              item\n              container\n              xs={6}\n              justify=\"center\"\n              alignItems=\"center\"\n              className={classes.rightGrid}\n            >\n              {(() => {\n                if (loading) return <CircularProgress />;\n                if (students.length > 0)\n                  return (\n                    <img\n                      className={classes.studentPicture}\n                      src={`students/${students[0].name}.jpg`}\n                      alt={`${students[0].name}`}\n                    />\n                  );\n                return (\n                  <Typography className={classes.message}>{message}</Typography>\n                );\n              })()}\n            </Grid>\n          </Grid>\n        </Grid>\n      )}\n      {!imageData && (\n        <Grid item container justify=\"center\">\n          <img src=\"camera_kao_ninshiki.png\" alt=\"顔認識\" />\n        </Grid>\n      )}\n      {!students.length && (\n        <Grid item container justify=\"center\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            component=\"label\"\n            disabled={loading}\n          >\n            {imageData ? '別の画像を選択' : '判定したい画像を選択'}\n            <input\n              type=\"file\"\n              accept=\"image/*\"\n              hidden\n              onChange={onChangeInput}\n            />\n          </Button>\n        </Grid>\n      )}\n      {students.length > 0 && !loading && (\n        <>\n          <Grid item container justify=\"center\">\n            <Typography>\n              この人物は <b>{students[0].name}</b>{' '}\n              {students[0].confidence >= 0.65 ? 'です！' : 'に似ています！'}\n            </Typography>\n          </Grid>\n          <Grid item container>\n            {students.map((student) => (\n              <Grid item container justify=\"center\" key={student.name}>\n                <Typography>\n                  {student.name} ... そっくり度{' '}\n                  {(student.confidence * 100).toFixed(1)}%\n                </Typography>\n              </Grid>\n            ))}\n          </Grid>\n          <Grid item container direction=\"row\" justify=\"center\" spacing={2}>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                component=\"label\"\n                disabled={loading}\n              >\n                別の画像で試す\n                <input\n                  type=\"file\"\n                  accept=\"image/*\"\n                  hidden\n                  onChange={onChangeInput}\n                />\n              </Button>\n            </Grid>\n            <Grid item>\n              <TweetButton students={students} />\n            </Grid>\n          </Grid>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Pictures;\n","import { VFC } from 'react';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport {\n  AppBar,\n  Container,\n  createMuiTheme,\n  Grid,\n  Link,\n  Paper,\n  ThemeProvider,\n  Toolbar,\n  Typography,\n} from '@material-ui/core';\nimport Pictures from './components/Pictures';\n\nconst theme = createMuiTheme({\n  palette: {\n    secondary: {\n      main: '#00acee',\n    },\n  },\n});\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    title: {\n      flexGrow: 1,\n    },\n    container: {\n      padding: 0,\n    },\n    body: {\n      padding: 8,\n    },\n  })\n);\n\nconst App: VFC = () => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n        <AppBar position=\"static\">\n          <Toolbar variant=\"dense\">\n            <Typography variant=\"h6\" className={classes.title}>\n              さくら学院 顔診断（開発中）\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Container maxWidth=\"md\" className={classes.container}>\n          <Paper className={classes.body}>\n            <Grid container spacing={2}>\n              <Grid item>\n                <Typography>\n                  画像に写っている人が、さくら学院の中で\n                  <b>どの生徒にどのくらい似ているか</b>判定するよ！\n                </Typography>\n                <Typography variant=\"caption\">\n                  ※画像は判定のため\n                  <Link\n                    href=\"https://azure.microsoft.com/ja-jp/services/cognitive-services/face/#demo\"\n                    target=\"_blank\"\n                  >\n                    Microsoft\n                  </Link>\n                  へ送信されます、それ以外には使用されません\n                </Typography>\n                <br />\n                <Typography variant=\"caption\">\n                  ※顔全体が正面を向いて写っていると、認識されやすいです\n                </Typography>\n              </Grid>\n              <Pictures />\n              <Grid item container justify=\"flex-end\">\n                <Typography variant=\"caption\">\n                  開発：{' '}\n                  <Link\n                    href=\"https://twitter.com/ryochan_metal\"\n                    target=\"_blank\"\n                  >\n                    @ryochan_metal\n                  </Link>\n                </Typography>\n              </Grid>\n            </Grid>\n          </Paper>\n        </Container>\n      </ThemeProvider>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}